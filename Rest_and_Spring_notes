
When Spring application starts, it creates objects annotated by @RestController, @Component (also called Beans)
, stores them in "Application Context".
When creating Beans, Spring checks for fields or methods annotated with @Autowired and injects those references form "Application Context"

Any Bean stored in Application context is given a name, and by default the name will be the name of the class in camel case
	BeanClassName -> beanClassName
You can also specify a bean name
	@Component("beanName")

If a method is annotated with @Autowired, it is executed on constructed object at application start-up, and all method parameters are 
injected from "Application Context". This is valid for any method not just setters
	@Autowired
	public xxxx(MailSender mailsender){ <-- mailsender is injected
		this.mailsender = mailsender;
	}
This is also valid for constructors. If there is only ONE constructor for the object, and this constructor has same parameters, these
parameters will be injected even without @Autowired annotation. In case of many constructors, only one can be annotated with @Autowired
Injection via Constructor is prefferd over field or method injection

If Application context contains multiple instances of the same type(interface), you can specify which instance to inject by naming
the variable the same name as bean name. If bean name is not provided , bean name is the same as class name written in camel case
	@Component("someBean")
	//default bean name would be someMailSender
	public SomeMailSender implements MailSender{
	...
	@Autowire
	private MailSender someBean;
The other way is to annotate bean to inject with @Primary annotation
One more way is to qualify bean with @Qualifier, and than use the Qualifier. If Bean is not annotated with @Qualifier, it still has by 
default defined @Qualifier with default name (apparently doesn't work for me), class name in camel case 

Lets say you have some third party classes without @Component annotation and you still want to make beans out of this classes.
You can annotate some class with @Configutaion annotation and define methods annotated with @Bean annotation to create these beans
Beans created with @Bean annotated methods have name equal to the name of annotated method
Instead @Configuration annotation, @Comonent annotation can be used as well, but this is not advisable
You can have as many @Configuration classes as you like
	